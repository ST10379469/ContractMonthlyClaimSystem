@using ContractMonthlyClaimSystem.Models
@model List<MonthlyClaim>
@{
    ViewData["Title"] = "My Claims";

    // Sample data with 10 claims
    var sampleClaims = new List<MonthlyClaim>
    {
        new MonthlyClaim { Id = 1, Month = 3, Year = 2024, TotalAmount = 1250, Status = ClaimStatus.PendingReview, SubmittedDate = DateTime.Now.AddDays(-2), UserId = "lecturer@university.edu" },
        new MonthlyClaim { Id = 2, Month = 2, Year = 2024, TotalAmount = 1800, Status = ClaimStatus.Approved, SubmittedDate = DateTime.Now.AddDays(-7), UserId = "lecturer@university.edu" },
        new MonthlyClaim { Id = 3, Month = 1, Year = 2024, TotalAmount = 950, Status = ClaimStatus.Approved, SubmittedDate = DateTime.Now.AddDays(-21), UserId = "lecturer@university.edu" },
        new MonthlyClaim { Id = 4, Month = 12, Year = 2023, TotalAmount = 2200, Status = ClaimStatus.Approved, SubmittedDate = DateTime.Now.AddDays(-45), UserId = "lecturer@university.edu" },
        new MonthlyClaim { Id = 5, Month = 11, Year = 2023, TotalAmount = 1650, Status = ClaimStatus.Approved, SubmittedDate = DateTime.Now.AddDays(-60), UserId = "lecturer@university.edu" },
        new MonthlyClaim { Id = 6, Month = 10, Year = 2023, TotalAmount = 1400, Status = ClaimStatus.Approved, SubmittedDate = DateTime.Now.AddDays(-75), UserId = "lecturer@university.edu" },
        new MonthlyClaim { Id = 7, Month = 9, Year = 2023, TotalAmount = 1900, Status = ClaimStatus.Approved, SubmittedDate = DateTime.Now.AddDays(-90), UserId = "lecturer@university.edu" },
        new MonthlyClaim { Id = 8, Month = 8, Year = 2023, TotalAmount = 1100, Status = ClaimStatus.Rejected, SubmittedDate = DateTime.Now.AddDays(-105), UserId = "lecturer@university.edu" },
        new MonthlyClaim { Id = 9, Month = 7, Year = 2023, TotalAmount = 1750, Status = ClaimStatus.Approved, SubmittedDate = DateTime.Now.AddDays(-120), UserId = "lecturer@university.edu" },
        new MonthlyClaim { Id = 10, Month = 6, Year = 2023, TotalAmount = 1300, Status = ClaimStatus.Approved, SubmittedDate = DateTime.Now.AddDays(-135), UserId = "lecturer@university.edu" }
    };

    var claims = Model.Any() ? Model : sampleClaims;
}

<div class="main-container">
    <div class="container-fluid py-4">
        <!-- Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h2 class="mb-1">My Claims</h2>
                        <p class="text-muted mb-0">Track and manage your monthly claims</p>
                    </div>
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="fas fa-plus-circle me-2"></i>New Claim
                    </a>
                </div>
            </div>
        </div>

        <!-- Statistics -->
        <div class="row mb-4">
            <div class="col-md-2 col-6">
                <div class="card border-0 bg-light">
                    <div class="card-body text-center">
                        <h3 class="text-primary mb-1">@claims.Count</h3>
                        <small class="text-muted">Total</small>
                    </div>
                </div>
            </div>
            <div class="col-md-2 col-6">
                <div class="card border-0 bg-light">
                    <div class="card-body text-center">
                        <h3 class="text-warning mb-1">@claims.Count(c => c.Status == ClaimStatus.PendingReview)</h3>
                        <small class="text-muted">Pending</small>
                    </div>
                </div>
            </div>
            <div class="col-md-2 col-6">
                <div class="card border-0 bg-light">
                    <div class="card-body text-center">
                        <h3 class="text-success mb-1">@claims.Count(c => c.Status == ClaimStatus.Approved)</h3>
                        <small class="text-muted">Approved</small>
                    </div>
                </div>
            </div>
            <div class="col-md-2 col-6">
                <div class="card border-0 bg-light">
                    <div class="card-body text-center">
                        <h3 class="text-danger mb-1">@claims.Count(c => c.Status == ClaimStatus.Rejected)</h3>
                        <small class="text-muted">Rejected</small>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card border-0 bg-primary text-white">
                    <div class="card-body text-center">
                        <h3 class="mb-1">$@claims.Where(c => c.Status == ClaimStatus.Approved).Sum(c => c.TotalAmount).ToString("N0")</h3>
                        <small>Total Approved Amount</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Claims Table -->
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Claim History</h5>
                    <div class="btn-group">
                        <button class="btn btn-outline-secondary btn-sm">Export</button>
                        <button class="btn btn-outline-secondary btn-sm">Filter</button>
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Period</th>
                                <th>Amount</th>
                                <th>Status</th>
                                <th>Progress</th>
                                <th>Submitted</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var claim in claims)
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="avatar me-3" style="background: linear-gradient(135deg, #4361ee 0%, #3a0ca3 100%);">
                                                @System.Globalization.DateTimeFormatInfo.CurrentInfo.GetMonthName(claim.Month).Substring(0, 1)
                                            </div>
                                            <div>
                                                <strong>@System.Globalization.DateTimeFormatInfo.CurrentInfo.GetMonthName(claim.Month) @claim.Year</strong>
                                                <br>
                                                <small class="text-muted">Claim #@claim.Id</small>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="fw-bold text-success">$@claim.TotalAmount.ToString("N2")</span>
                                    </td>
                                    <td>
                                        <span class="badge bg-@GetStatusBadgeColor(claim.Status) status-badge">
                                            <i class="fas fa-@GetStatusIcon(claim.Status) me-1"></i>
                                            @GetStatusDisplayText(claim.Status)
                                        </span>
                                    </td>
                                    <td style="width: 150px;">
                                        <div class="progress" style="height: 6px;">
                                            <div class="progress-bar bg-@GetStatusBadgeColor(claim.Status)" style="width: @GetProgressPercentage(claim.Status)%"></div>
                                        </div>
                                        <small class="text-muted">@GetProgressText(claim.Status)</small>
                                    </td>
                                    <td>
                                        @if (claim.SubmittedDate.HasValue)
                                        {
                                            <span>@claim.SubmittedDate.Value.ToString("MMM dd, yyyy")</span>
                                            <br>
                                            <small class="text-muted">@GetTimeAgo(claim.SubmittedDate.Value)</small>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            @if (claim.Status == ClaimStatus.Draft || claim.Status == ClaimStatus.ChangesRequested)
                                            {
                                                <button class="btn btn-outline-secondary">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    public string GetStatusBadgeColor(ClaimStatus status)
    {
        return status switch
        {
            ClaimStatus.Approved => "success",
            ClaimStatus.Rejected => "danger",
            ClaimStatus.PendingReview => "warning",
            ClaimStatus.ChangesRequested => "info",
            ClaimStatus.Draft => "secondary",
            ClaimStatus.Submitted => "primary",
            _ => "secondary"
        };
    }

    public string GetStatusIcon(ClaimStatus status)
    {
        return status switch
        {
            ClaimStatus.Approved => "check-circle",
            ClaimStatus.Rejected => "times-circle",
            ClaimStatus.PendingReview => "clock",
            ClaimStatus.ChangesRequested => "exclamation-circle",
            ClaimStatus.Draft => "edit",
            ClaimStatus.Submitted => "paper-plane",
            _ => "question-circle"
        };
    }

    public string GetStatusDisplayText(ClaimStatus status)
    {
        return status switch
        {
            ClaimStatus.PendingReview => "Under Review",
            ClaimStatus.ChangesRequested => "Changes Requested",
            _ => status.ToString()
        };
    }

    public int GetProgressPercentage(ClaimStatus status)
    {
        return status switch
        {
            ClaimStatus.Draft => 25,
            ClaimStatus.Submitted => 50,
            ClaimStatus.PendingReview => 75,
            ClaimStatus.ChangesRequested => 60,
            ClaimStatus.Approved => 100,
            ClaimStatus.Rejected => 100,
            _ => 0
        };
    }

    public string GetProgressText(ClaimStatus status)
    {
        return status switch
        {
            ClaimStatus.Draft => "Draft",
            ClaimStatus.Submitted => "Submitted",
            ClaimStatus.PendingReview => "In Review",
            ClaimStatus.ChangesRequested => "Changes Needed",
            ClaimStatus.Approved => "Completed",
            ClaimStatus.Rejected => "Rejected",
            _ => "Unknown"
        };
    }

    public string GetTimeAgo(DateTime date)
    {
        var timeSpan = DateTime.Now - date;
        if (timeSpan.TotalDays >= 30)
            return $"{(int)(timeSpan.TotalDays / 30)} months ago";
        if (timeSpan.TotalDays >= 7)
            return $"{(int)(timeSpan.TotalDays / 7)} weeks ago";
        if (timeSpan.TotalDays >= 1)
            return $"{(int)timeSpan.TotalDays} days ago";
        if (timeSpan.TotalHours >= 1)
            return $"{(int)timeSpan.TotalHours} hours ago";
        return "Just now";
    }
}